int input = 0; //user instansiated
float[][] incoming = new float[1][input]
kNearest() {
    int groupNumLayer = 0;                                           //user input
    int groupNumNeuron = 0;                                          //user input number of groups neuron
    int groupNum = (int) round(activityNeuron[groupNumLayer][0][groupNumNeuron]); //input neuron rounded or input your own value
    float[] centroid = new float[groupNum]      //centroid array
    boolean same = true;
    //new random and different centroids
    for int (int a = 0; a < groupNum; a++) {   
        while(same) {
            centroid[a] = incoming[rand % incoming[0].length];
            same = false;
            for (int d = 0; d < a; d++) {
                if (centroid[a] == centroid[d]) {
                    same = true;
                }
            }
        }
    }

    int[] group = new int[incoming[0].length];
    boolean fin = false;
    int best;
    int newBest;
    while (fin == false) {
        for (int a = 0; a < incmoing[0].length; a++) {
            best = null;
            for (int b = 0; b < groupNum; b++) {
                newBest = incoming[0][a] - centroid[b];
                if (best == null || newBest < best) {
                    best = newBest;
                    group[a] = b;
                    fin = false;
                } else {
                    fin = true
                }
            }
        }

        if (fin == true) {
            break;
        }
        //finding new centroids
        int[] sum = new int[groupNum];
        int[] div = new int[groupNum]
        for (int a = 0; a < incoming[0].length; a++) {
            for ( int b = 0 b < groupNum; b++) {
                if (group[a] = b) {
                    sum[b] += incoming[0][a]
                    div[b]++;
                }
            }
        }
        centroid = sum/div; //in parallel
    }
    
    return group; 
}